A SkillsMedieval é uma empresa que vive da era medieval. Eles pretendem um sistema Web para desenvolver o sistema EraMedieval4all. 
Estejam eles dispostos a alugar trajes de cavaleiros, burgueses, etc, os clientes terão que ser registados na base de dados com varias informações, mas o numero de contribuinte é essencial para o sistema, de forma que um cliente seja conhecido pelo sistema, o nome, morada, email, telefone ou um estado são características essenciais para o registo. Um cliente poderá estar bastante ativo nas atividades medievais ou então já ter deixado essa era estar na era atual. Estes clientes podem ser meros clientes que se deslocam para efetuar o seu aluguer ou podem gostar de ter acesso ao sistema, podendo visualizar toda a informação confidencial que só se destinam ao mais nobres do reino.

Todos os eventos medievais são bem-vindos a este sistema, de forma que se possa efetuar um aluguer de trajes pois é sempre necessário saber que evento estes serão utilizados, dessa forma é necessário conhecer o organizador e que tipo de organizações ele faz, se são feiras, festivais, etc. Um organizador necessita de indicar o seu nome, localidade a que pertence, numero de contribuinte que não servirá para o identificar. Quanto ao evento realizado por qualquer um dos organizadores é necessário saber em que localidade será efetuada a viagem histórica, uma descrição do que será o acontecimento, um titulo, em que data se inicia e em que data poderão todos os via jantes voltar no tempo aos seus tempos atuais, também se sabe que estes eventos do passado, deverão ter paginas sociais como link do facebook, do instagram e do tiktok.

Os utilizadores são cavaleiros do reino, os protetores do sistema e quem ajuda o reino a manter tudo organizado, estes podem ser tipificados de diversas formas, há os que administram o reino, os que apenas tem algumas permissões e são administrativos do sistema e os que se trajam de diversas formas. Os utilizadores tem que ser identificados pelo nome, morada, telefone, email e password.

Para que o rei consiga controlar tudo, é necessário saber em que momento foram efetuados os acessos ao reino, por isso é preciso registar a que horas entrou e saiu um utilizador, sendo essa função fulcral.

Os trajes são o grande focos do sistema. Cada traje tem uma referencia única constituída por um conjunto de caracteres sejam eles do alfabeto medieval ou od atual, o nome do traje tbm é essencial, saber se esta disponível para alugar ou não, o valor do aluguer e saber em que armazém se encontra, uma vez que os armazéns tbm são controlados no sistema e é necessário que se identifiquem pelo nome e por um identificador único. A imagem do traje é um fator crucial para quem escolhe um traje por isso p sistema tem que guardar a foto que se tira do traje.

O aluguer efetuado por um cliente tem que estar associado a um utilizador que foi quem colocou as suas credenciais no sistema para permitir que o aluguer acontecesse num determinado dia e hora que são do interesse saber. Um cliente quando efetua um aluguer pode pretender levar diferentes trajes para o evento ao qual vai presenciar, até porque um evento que tenha a duração de vários dias poderá ser de todo o interesse levar um traje ara cada um desses dias.
Quando são devolvidos todos os trajes, é necessário dar por encerrado este processo que tem um estado para quando esta adecorrer e outro para quando está finalizado, sendo que este sistema não precisa de ser medieval, pode ser utilizado o binário para este controlo. O cliente nunca leva um traje se não disser a data de entrega.


-- Tabela de Clientes
CREATE TABLE clients (
    client_id INT IDENTITY(1,1) PRIMARY KEY,  -- Auto-increment
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    taxpayer_number VARCHAR(20) UNIQUE NOT NULL,  -- Número de contribuinte único
    address VARCHAR(255),
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20),
    state VARCHAR(20) CHECK (state IN ('Active', 'Inactive')) DEFAULT 'Inactive', -- Estado do cliente
    registration_date DATETIME DEFAULT GETDATE() -- Data de registro do cliente
);

-- Tabela de Organizadores
CREATE TABLE organizers (
    organizer_id INT IDENTITY(1,1) PRIMARY KEY,  -- Auto-increment
    name VARCHAR(255) NOT NULL,
    locality VARCHAR(100),
    taxpayer_number VARCHAR(20) NOT NULL -- Número de contribuinte
);

-- Tabela de Eventos
CREATE TABLE events (
    event_id INT IDENTITY(1,1) PRIMARY KEY,  -- Auto-increment
    title VARCHAR(255) NOT NULL,
    description TEXT,
    start_date DATETIME,
    end_date DATETIME,
    location VARCHAR(255),
    organizer_id INT,
    facebook_link VARCHAR(255),
    instagram_link VARCHAR(255),
    tiktok_link VARCHAR(255),
    FOREIGN KEY (organizer_id) REFERENCES organizers(organizer_id) -- Relacionamento com organizador
);

-- Tabela de Usuários (Cavaleiros/Protetores)
CREATE TABLE users (
    user_id INT IDENTITY(1,1) PRIMARY KEY,  -- Auto-increment
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    address VARCHAR(255),
    phone_number VARCHAR(20),
    email VARCHAR(100) UNIQUE,
    password VARCHAR(255),
    role VARCHAR(20) CHECK (role IN ('Admin', 'Moderator', 'Knight', 'Other')) DEFAULT 'Other', -- Função do usuário
    registration_date DATETIME DEFAULT GETDATE() -- Data de registro do usuário
);

-- Tabela de Logs de Acessos dos Usuários
CREATE TABLE user_access_log (
    log_id INT IDENTITY(1,1) PRIMARY KEY,  -- Auto-increment
    user_id INT,
    login_time DATETIME DEFAULT GETDATE(),
    logout_time DATETIME,
    FOREIGN KEY (user_id) REFERENCES users(user_id) -- Relacionamento com usuário
);

-- Tabela de Armazéns
CREATE TABLE warehouses (
    warehouse_id INT IDENTITY(1,1) PRIMARY KEY,  -- Auto-increment
    name VARCHAR(255) NOT NULL,
    location VARCHAR(255)
);

-- Tabela de Trajes
CREATE TABLE costumes (
    costume_id INT IDENTITY(1,1) PRIMARY KEY,  -- Auto-increment
    reference_code VARCHAR(50) UNIQUE NOT NULL,  -- Código de referência único
    name VARCHAR(255) NOT NULL,
    available_for_rent BIT DEFAULT 1,  -- Disponibilidade para aluguel (1 = disponível, 0 = não disponível)
    rental_price DECIMAL(10, 2) NOT NULL, -- Preço do aluguel
    warehouse_id INT,
    image_path VARCHAR(255), -- Caminho da imagem
    FOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id) -- Relacionamento com armazém
);

-- Tabela de Aluguéis
CREATE TABLE rentals (
    rental_id INT IDENTITY(1,1) PRIMARY KEY,  -- Auto-increment
    client_id INT,
    user_id INT,
    rental_date DATETIME DEFAULT GETDATE(),
    return_date DATETIME,
    status VARCHAR(20) CHECK (status IN ('In Progress', 'Completed')) DEFAULT 'In Progress', -- Status do aluguel
    FOREIGN KEY (client_id) REFERENCES clients(client_id), -- Relacionamento com cliente
    FOREIGN KEY (user_id) REFERENCES users(user_id) -- Relacionamento com usuário
);

-- Tabela de Itens de Aluguel (Trajes alugados)
CREATE TABLE rental_items (
    rental_item_id INT IDENTITY(1,1) PRIMARY KEY,  -- Auto-increment
    rental_id INT,
    costume_id INT,
    quantity INT DEFAULT 1,  -- Quantidade de trajes alugados
    FOREIGN KEY (rental_id) REFERENCES rentals(rental_id), -- Relacionamento com aluguel
    FOREIGN KEY (costume_id) REFERENCES costumes(costume_id) -- Relacionamento com traje
);

-- Tabela de Devoluções de Aluguel
CREATE TABLE rental_returns (
    return_id INT IDENTITY(1,1) PRIMARY KEY,  -- Auto-increment
    rental_id INT,
    return_date DATETIME DEFAULT GETDATE(),
    status VARCHAR(20) CHECK (status IN ('Returned', 'Not Returned')) DEFAULT 'Not Returned', -- Status da devolução
    FOREIGN KEY (rental_id) REFERENCES rentals(rental_id) -- Relacionamento com aluguel
);

-- Tabela de Trajes nos Eventos (Vincula trajes aos eventos)
CREATE TABLE event_costumes (
    event_costume_id INT IDENTITY(1,1) PRIMARY KEY,  -- Auto-increment
    event_id INT,
    costume_id INT,
    FOREIGN KEY (event_id) REFERENCES events(event_id), -- Relacionamento com evento
    FOREIGN KEY (costume_id) REFERENCES costumes(costume_id) -- Relacionamento com traje
);


agora cria um trigger para, quando um traje é alugado altere o estado para alugado.

-- 3. Trigger para alterar o estado do traje para "não disponível" quando ele for alugado
CREATE TRIGGER trg_update_costume_availability
ON rental_items
AFTER INSERT
AS
BEGIN
    -- Atualiza o estado do traje para "não disponível" após o aluguel
    UPDATE costumes
    SET available_for_rent = 0  -- Traje será marcado como não disponível
    FROM costumes c
    INNER JOIN inserted i ON c.costume_id = i.costume_id
    WHERE i.costume_id = c.costume_id;
END;

Cria um stored procedure que após a criação de um traje este fique indisponível para lugar.

/*
-- 4. Creates a stored procedure so that after creating a costume it becomes unavailable for use.

-- Stored Procedure Creation
CREATE PROCEDURE MarkCostumeAsUnavailable
    @costume_id INT -- ID of the costume that was created
AS
BEGIN
    -- Updates costume state to "unavailable" after creation
    UPDATE costumes
    SET available_for_rent = 0  -- Mark the costume as unavailable for rent
    WHERE costume_id = @costume_id;

    -- Message to confirm the update
    PRINT 'Costume marked as unavailable for rental.';
END;

-- Stored Procedure Execution
EXEC MarkCostumeAsUnavailable @costume_id = 1; -- Replace '1' with the ID of the outfit you want to mark as unavailable

*/

inserir dados com pelo menos 5 registos nas tabelas.

/* -- 5. Insert data (with at least 5 records) into the tables.


INSERT INTO clients (first_name, last_name, taxpayer_number, address, email, phone_number, state)
VALUES 
    ('John', 'Doe', '123456789', '123 Medieval St, Camelot', 'john.doe@example.com', '123-456-7890', 'Active'),
    ('Alice', 'Smith', '987654321', '456 Kings Rd, Camelot', 'alice.smith@example.com', '234-567-8901', 'Active'),
    ('Bob', 'Johnson', '112233445', '789 Queens Blvd, Camelot', 'bob.johnson@example.com', '345-678-9012', 'Inactive'),
    ('Emily', 'Davis', '667788990', '101 Knight Way, Camelot', 'emily.davis@example.com', '456-789-0123', 'Active'),
    ('Michael', 'Brown', '223344556', '202 Royal Ave, Camelot', 'michael.brown@example.com', '567-890-1234', 'Inactive');

	-- Inserting data into the organizers table
INSERT INTO organizers (name, locality, taxpayer_number)
VALUES 
    ('King Arthur''s Tournament', 'Camelot', '555123456'),
    ('Medieval Knights Fair', 'Excalibur', '555654321'),
    ('Dragon Festival', 'Kingdom of Avalon', '555789012'),
    ('Camelot Renaissance', 'Camelot', '555345678'),
    ('Legends of the Round Table', 'Camelot', '555987654');

	-- Inserting data into the events table
INSERT INTO events (title, description, start_date, end_date, location, organizer_id, facebook_link, instagram_link, tiktok_link)
VALUES 
    ('Jousting Tournament', 'A thrilling jousting competition.', '2024-12-01 10:00:00', '2024-12-01 17:00:00', 'Camelot Arena', 1, 'https://facebook.com/jousting', 'https://instagram.com/jousting', 'https://tiktok.com/@jousting'),
    ('Medieval Feast', 'Join us for a grand medieval feast with music and dance.', '2024-12-05 18:00:00', '2024-12-05 22:00:00', 'Camelot Great Hall', 2, 'https://facebook.com/medievalfeast', 'https://instagram.com/medievalfeast', 'https://tiktok.com/@medievalfeast'),
    ('Dragon Fire Festival', 'A spectacular display of fire-breathing dragons.', '2024-12-10 19:00:00', '2024-12-10 23:00:00', 'Avalon Arena', 3, 'https://facebook.com/dragonfirefestival', 'https://instagram.com/dragonfirefestival', 'https://tiktok.com/@dragonfirefestival'),
    ('Royal Ball', 'An elegant ball with nobles from all kingdoms.', '2024-12-12 20:00:00', '2024-12-12 23:59:00', 'Camelot Ballroom', 4, 'https://facebook.com/royalball', 'https://instagram.com/royalball', 'https://tiktok.com/@royalball'),
    ('Knight''s Oath Ceremony', 'A ceremonial oath of allegiance by the knights.', '2024-12-15 14:00:00', '2024-12-15 16:00:00', 'Camelot Castle', 5, 'https://facebook.com/knightsoath', 'https://instagram.com/knightsoath', 'https://tiktok.com/@knightsoath');

	-- Inserting data into the users table
INSERT INTO users (first_name, last_name, address, phone_number, email, password, role)
VALUES 
    ('Arthur', 'Pendragon', 'Camelot Castle', '678-123-4567', 'arthur@camelot.com', 'password123', 'Admin'),
    ('Lancelot', 'du Lac', 'Knights Hall, Camelot', '789-234-5678', 'lancelot@camelot.com', 'password123', 'Knight'),
    ('Gawain', 'of Orkney', 'Camelot Castle', '890-345-6789', 'gawain@camelot.com', 'password123', 'Moderator'),
    ('Guinevere', 'Pendragon', 'Camelot Castle', '123-456-7890', 'guinevere@camelot.com', 'password123', 'Admin'),
    ('Merlin', 'the Wizard', 'Merlin''s Tower, Camelot', '234-567-8901', 'merlin@camelot.com', 'password123', 'Other');

	-- Inserting data into the user_access_log table
INSERT INTO user_access_log (user_id, login_time, logout_time)
VALUES 
    (1, '2024-11-01 08:00:00', '2024-11-01 16:00:00'),
    (2, '2024-11-02 09:00:00', '2024-11-02 17:00:00'),
    (3, '2024-11-03 10:00:00', '2024-11-03 18:00:00'),
    (4, '2024-11-04 11:00:00', '2024-11-04 19:00:00'),
    (5, '2024-11-05 12:00:00', '2024-11-05 20:00:00');

	-- Inserting data into the warehouses table
INSERT INTO warehouses (name, location)
VALUES 
    ('Camelot Warehouse', 'Camelot Castle'),
    ('Excalibur Warehouse', 'Excalibur City'),
    ('Avalon Warehouse', 'Avalon Kingdom'),
    ('Royal Warehouse', 'Camelot Castle'),
    ('Dragonstone Warehouse', 'Dragonstone Castle');

	-- Inserting data into the costumes table
INSERT INTO costumes (reference_code, name, available_for_rent, rental_price, warehouse_id, image_path)
VALUES 
    ('R001', 'Knight Armor', 1, 150.00, 1, 'images/knight_armor.jpg'),
    ('R002', 'Jester Costume', 1, 75.00, 2, 'images/jester_costume.jpg'),
    ('R003', 'Princess Gown', 1, 120.00, 3, 'images/princess_gown.jpg'),
    ('R004', 'Dragon Slayer Armor', 1, 200.00, 4, 'images/dragon_slayer_armor.jpg'),
    ('R005', 'Royal Robes', 1, 180.00, 5, 'images/royal_robes.jpg');

	-- Inserting data into the rentals table
INSERT INTO rentals (client_id, user_id, rental_date, return_date, status)
VALUES 
    (1, 2, '2024-11-01 10:00:00', '2024-11-02 12:00:00', 'In Progress'),
    (2, 3, '2024-11-02 09:00:00', '2024-11-03 12:00:00', 'In Progress'),
    (3, 4, '2024-11-03 14:00:00', '2024-11-04 16:00:00', 'Completed'),
    (4, 5, '2024-11-04 08:00:00', '2024-11-05 10:00:00', 'Completed'),
    (5, 1, '2024-11-05 11:00:00', '2024-11-06 13:00:00', 'In Progress');

	-- Inserting data into the rental_items table
INSERT INTO rental_items (rental_id, costume_id, quantity)
VALUES 
    (1, 1, 1),
    (2, 2, 2),
    (3, 3, 1),
    (4, 4, 1),
    (5, 5, 1);

	-- Inserting data into the rental_returns table
INSERT INTO rental_returns (rental_id, return_date, status)
VALUES 
    (1, '2024-11-02 12:00:00', 'Returned'),
    (2, '2024-11-03 12:00:00', 'Returned'),
    (3, '2024-11-04 16:00:00', 'Returned'),
    (4, '2024-11-05 10:00:00', 'Returned'),
    (5, '2024-11-06 13:00:00', 'Not Returned');

	
-- Inserting data into the event_costumes table
INSERT INTO event_costumes (event_id, costume_id)
VALUES 
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5);

-- See Data in the Tables

SELECT * FROM dbo.clients;
SELECT * FROM dbo.costumes;
SELECT * FROM dbo.event_costumes;
SELECT * FROM dbo.events;
SELECT * FROM dbo.organizers; 
SELECT * FROM dbo.rental_items;
SELECT * FROM dbo.rental_returns;
SELECT * FROM dbo.user_access_log;
SELECT * FROM dbo.users;
SELECT * FROM dbo.warehouses;

*/

Agora é o seguinte, o meu sistema precisa de um sistema de autenticação para diferenciar os utilizadores com as seguintes validações:
Após 3 tentativas de login com falha na password, a conta fica bloqueada
Cada login efetuado deve ficar registado de forma a efetuar uma auditoria (com data e hora de login e logout).
A encriptação da password é em AES-256
Só são aceites passwords que contenham letras maiúsculas , minúsculas, números e caracteres especiais e que tenham no mínimo 8 caracteres.
Um utilizador inativo não tem acesso ao sistema.
Um utilizador com a conta inativa é alertado para esse facto, quando tenta fazer login.
Se a conta estiver bloqueada, é necessário desbloquear usando um sistema de recuperação com um pin de 4 dígitos.
Quando um utilizador tem a conta bloqueada, é alertado para esse facto, quando tenta fazer login.
É necessário criar a opção "esqueci-me da password", com um sistema de recuperação com base no email e pin do utilizador.
É necessário criar uma página de consulta para auditar os logins de todos os utilizadores.
Após o primeiro login, pede ao utilizador para alterar a password.

-------------
using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace BibliotecaSkilliana_M2.Cliente
{
    public partial class FormVerClientes : Form
    {
        string cs = ConfigurationManager.ConnectionStrings["LibSkilliana_EduardoMoreno"].ConnectionString;
        SqlConnection con;
        SqlCommand cmd;
        SqlDataAdapter adapter;
        DataTable dt;

        public FormVerClientes()
        {
            InitializeComponent();
        }

        private void FormVerClientes_Load(object sender, EventArgs e)
        {
            LoadClients();
            AddDeleteButtonColumn();
        }

        private void LoadClients()
        {
            try
            {
                using (con = new SqlConnection(cs))
                {
                    con.Open();
                    string query = @"
                SELECT 
                    client_id, 
                    first_name, 
                    last_name, 
                    taxpayer_number, 
                    address, 
                    email, 
                    phone_number, 
                    state, 
                    registration_date 
                FROM clients";
                    SqlCommand cmd = new SqlCommand(query, con);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    DataTable dt = new DataTable();
                    adapter.Fill(dt);

                    dataGridClients.DataSource = dt;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Erro ao carregar Clientes: " + ex.Message);
            }
        }

        private void DeleteClient(int rowIndex)
        {
            try
            {
                using (con = new SqlConnection(cs))
                {
                    con.Open();
                    int clientId = Convert.ToInt32(dataGridClients.Rows[rowIndex].Cells["client_id"].Value);
                    string query = "DELETE FROM clients WHERE client_id = @client_id";
                    SqlCommand cmd = new SqlCommand(query, con);
                    cmd.Parameters.AddWithValue("@client_id", clientId);
                    cmd.ExecuteNonQuery();

                    MessageBox.Show("Cliente apagado com sucesso!");
                    LoadClients(); // Recarrega os clientes para atualizar o DataGridView
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Erro ao apagar o cliente: " + ex.Message);
            }
        }

        private void AddDeleteButtonColumn()
        {
            DataGridViewButtonColumn btnDeleteColumn = new DataGridViewButtonColumn();
            btnDeleteColumn.HeaderText = "Apagar";
            btnDeleteColumn.Name = "btnDelete";
            btnDeleteColumn.Text = "Apagar";
            btnDeleteColumn.UseColumnTextForButtonValue = true;

            dataGridClients.Columns.Add(btnDeleteColumn);
        }

        private void dataGridClients_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex == dataGridClients.Columns["btnDelete"].Index && e.RowIndex >= 0)
            {
                var confirmResult = MessageBox.Show("Tem a certeza de que pretende apagar este cliente?",
                                                     "Confirmar Eliminação",
                                                     MessageBoxButtons.YesNo);
                if (confirmResult == DialogResult.Yes)
                {
                    DeleteClient(e.RowIndex);
                }
            }
        }

        private void btnAdicionarCliente_Click(object sender, EventArgs e)
        {
            using (FormRegistrarCliente formRegistrarCliente = new FormRegistrarCliente())
            {
                formRegistrarCliente.ShowDialog();
                LoadClients(); // Recarrega os clientes após adicionar um novo cliente
            }
        }

        private void btnEditarCliente_Click(object sender, EventArgs e)
        {
            if (dataGridClients.SelectedRows.Count > 0)
            {
                int clientId = Convert.ToInt32(dataGridClients.SelectedRows[0].Cells["client_id"].Value);
                using (FormEditarCliente formEditarCliente = new FormEditarCliente(clientId))
                {
                    formEditarCliente.ShowDialog();
                    LoadClients(); // Recarrega os clientes após editar
                }
            }
            else
            {
                MessageBox.Show("Selecione um cliente para editar.");
            }
        }
    }
}
-----------------------------------------
using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace BibliotecaSkilliana_M2.Organizadores
{
    public partial class FormVerOrganizers : Form
    {
        string cs = ConfigurationManager.ConnectionStrings["LibSkilliana_EduardoMoreno"].ConnectionString;
        SqlConnection con;
        SqlCommand cmd;
        SqlDataAdapter adapter;
        DataTable dt;

        public FormVerOrganizers()
        {
            InitializeComponent();
        }

        private void FormVerOrganizers_Load(object sender, EventArgs e)
        {
            LoadOrganizers();
            AddDeleteButtonColumn();
        }

        private void LoadOrganizers()
        {
            try
            {
                using (con = new SqlConnection(cs))
                {
                    con.Open();
                    string query = @"
                SELECT 
                    organizer_id, 
                    name, 
                    locality, 
                    taxpayer_number 
                FROM organizers";
                    SqlCommand cmd = new SqlCommand(query, con);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    DataTable dt = new DataTable();
                    adapter.Fill(dt);

                    dataGridOrganizers.DataSource = dt;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Erro ao carregar Organizadores: " + ex.Message);
            }
        }

        private void DeleteOrganizer(int rowIndex)
        {
            try
            {
                using (con = new SqlConnection(cs))
                {
                    con.Open();
                    int organizerId = Convert.ToInt32(dataGridOrganizers.Rows[rowIndex].Cells["organizer_id"].Value);
                    string query = "DELETE FROM organizers WHERE organizer_id = @organizer_id";
                    SqlCommand cmd = new SqlCommand(query, con);
                    cmd.Parameters.AddWithValue("@organizer_id", organizerId);
                    cmd.ExecuteNonQuery();

                    MessageBox.Show("Organizador apagado com sucesso!");
                    LoadOrganizers(); // Recarrega os organizadores para atualizar o DataGridView
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Erro ao apagar o organizador: " + ex.Message);
            }
        }

        private void AddDeleteButtonColumn()
        {
            DataGridViewButtonColumn btnDeleteColumn = new DataGridViewButtonColumn();
            btnDeleteColumn.HeaderText = "Apagar";
            btnDeleteColumn.Name = "btnDelete";
            btnDeleteColumn.Text = "Apagar";
            btnDeleteColumn.UseColumnTextForButtonValue = true;

            dataGridOrganizers.Columns.Add(btnDeleteColumn);
        }

        private void dataGridOrganizers_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex == dataGridOrganizers.Columns["btnDelete"].Index && e.RowIndex >= 0)
            {
                var confirmResult = MessageBox.Show("Tem a certeza de que pretende apagar este organizador?",
                                                     "Confirmar Eliminação",
                                                     MessageBoxButtons.YesNo);
                if (confirmResult == DialogResult.Yes)
                {
                    DeleteOrganizer(e.RowIndex);
                }
            }
        }

        private void btnAdicionarOrganizer_Click(object sender, EventArgs e)
        {
            using (FormRegistrarOrganizer formRegistrarOrganizer = new FormRegistrarOrganizer())
            {
                formRegistrarOrganizer.ShowDialog();
                LoadOrganizers(); // Recarrega os organizadores após adicionar um novo organizador
            }
        }

        private void btnEditarOrganizer_Click(object sender, EventArgs e)
        {
            if (dataGridOrganizers.SelectedRows.Count > 0)
            {
                int organizerId = Convert.ToInt32(dataGridOrganizers.SelectedRows[0].Cells["organizer_id"].Value);
                using (FormEditarOrganizer formEditarOrganizer = new FormEditarOrganizer(organizerId))
                {
                    formEditarOrganizer.ShowDialog();
                    LoadOrganizers(); // Recarrega os organizadores após editar
                }
            }
            else
            {
                MessageBox.Show("Selecione um organizador para editar.");
            }
        }
    }
}

